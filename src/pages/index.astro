---
import { Image } from 'astro:assets'
import { getCollection } from 'astro:content'

// import { Quote } from 'astro-pure/advanced'
import { PostPreview } from 'astro-pure/components/pages'
import { getBlogCollection, sortMDByDate } from 'astro-pure/server'
import { Button, Card, Icon, Label, Spoiler } from 'astro-pure/user'
import PageLayout from '@/layouts/BaseLayout.astro'
import ProjectCard from '@/components/home/ProjectCard.astro'
import Section from '@/components/home/Section.astro'
import SkillLayout from '@/components/home/SkillLayout.astro'
import avatar from '@/assets/avatar.png'
import config from '@/site-config'

// const languages = ['Html', 'JavaScript', 'CSS', 'Shell']
// const frontend = ['TypeScript', 'Vite', 'Webpack', 'Astro']
// const backend = ['Vercel', 'Waline']

// Blog
const MAX_POSTS = 10
const allPosts = await getBlogCollection()
const allPostsByDate = sortMDByDate(allPosts).slice(0, MAX_POSTS)

// Projects
const MAX_PROJECTS = 4
const allProjects = await getCollection('projects')
const allProjectsByDate = sortMDByDate(allProjects).slice(0, MAX_PROJECTS)

const toCardImageProps = (hero?: { src?: unknown; alt?: string }) => {
  const raw = hero?.src
  const altText = hero?.alt

  // ImageMetadata 판별(최소 속성)
  const isMeta = raw && typeof raw === 'object'
    && 'src' in (raw as any) && 'width' in (raw as any) && 'height' in (raw as any)

  if (isMeta) return { image: raw as any, altText }     // ImageMetadata
  if (typeof raw === 'string') {
    if (/^https?:\/\//i.test(raw)) return { imageUrl: raw, altText }  // 원격
    return { imagePath: raw, altText }                                 // 로컬 경로
  }
  return { imagePath: '/src/assets/projects/placeholder.png', altText }
}

// 현재 사이트 기본 언어 기준(ko/en)로 필터하고 pubDate 내림차순 정렬
const currentLocale = (config.locale?.lang?.startsWith('en') ? 'en' : 'ko') as 'ko' | 'en'
const projectsForCards = allProjects
  .filter((p) => p.data.locale === currentLocale)
  .sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime())
  .slice(0, MAX_PROJECTS)
  .map((p) => {
    const href =
      currentLocale === 'ko'
        ? `/projects/${p.data.slug}`
        : `/en/projects/${p.data.slug}`

    const { image, imagePath, imageUrl, altText } = toCardImageProps(p.data.heroImage)

    return {
      href,
      heading: p.data.title,
      subheading: p.data.description ?? '',
      image,
      imagePath,
      imageUrl,
      altText
    }
  })
---

<PageLayout meta={{ title: 'Home' }} highlightColor='#659EB9'>
  <main class='flex w-full flex-col items-center'>
    <section class='animate mb-10 flex flex-col items-center gap-y-7' id='content-header'>
      <Image
        src={avatar}
        alt='profile'
        class='h-28 w-auto rounded-full border p-1'
        loading='eager'
      />

      <div class='flex flex-col items-center gap-y-4'>
        <h1 class='text-3xl font-bold'>{config.author}</h1>
        <p class='text-muted-foreground'>Seongyeon Kim</p>
        <div class='flex flex-wrap justify-center gap-x-7 gap-y-3'>
          <Label title='South Korea'>
            <Icon name='location' class='size-5' slot='icon' />
          </Label>
          <Label
            title='Github'
            as='a'
            href='https://github.com/yonaa-dev'
            target='_blank'
          >
            <Icon name='github' class='size-5' slot='icon' />
          </Label>
        </div>
      </div>

    </section>

    <div id='content' class='animate flex flex-col gap-y-10 md:w-4/5 lg:w-5/6'>
      <Section title='About'>
        <p class='text-muted-foreground'>Frontend Developer</p>
        <p class='text-muted-foreground'>
          안녕하세요! <strong>YONA</strong>입니다. UI/UX를 고려한 프론트엔드 개발, 기록과 경험을 좋아합니다.<br/><Spoiler>비 오는 날 커피 + 리팩토링이 국룰 ☕️</Spoiler>
        </p>
        <Button title='More about me' class='w-fit self-end' href='/about' variant='ahead' />
      </Section>
      {
        allPostsByDate.length > 0 && (
          <Section title='Blog'>
            <ul class='flex flex-col gap-y-1.5 sm:gap-y-2'>
              {allPostsByDate.map((p) => (
                <li class='flex flex-col gap-x-2 sm:flex-row'>
                  <PostPreview post={p} />
                </li>
              ))}
            </ul>
            <Button title='More posts' class='w-fit self-end' href='/blog' variant='ahead' />
          </Section>
        )
      }

      {
        allProjectsByDate.length > 0 && (
          <Section title='Projects'>
            <div class='grid grid-cols-1 gap-3 sm:grid-cols-2'>
              {projectsForCards.map((p) => (
                // <ProjectCard
                //   href={p.href}
                //   heading={p.heading}
                //   subheading={p.subheading}
                //   imagePath={p.imagePath}
                // />
                <ProjectCard
                  {...p}
                />
              ))}
            </div>
            <Button title='More projects' class='w-fit self-end' href='/projects' variant='ahead' />
          </Section>
        )
      }
      </main>
</PageLayout>
